// Code generated by Kitex v0.7.3. DO NOT EDIT.

package productservice

import (
	product "Eshop/kitex_gen/product"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

var productServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddProduct":         kitex.NewMethodInfo(addProductHandler, newProductServiceAddProductArgs, newProductServiceAddProductResult, false),
		"GetProductInfo":     kitex.NewMethodInfo(getProductInfoHandler, newProductServiceGetProductInfoArgs, newProductServiceGetProductInfoResult, false),
		"GetProductListInfo": kitex.NewMethodInfo(getProductListInfoHandler, newProductServiceGetProductListInfoArgs, newProductServiceGetProductListInfoResult, false),
		"DelProduct":         kitex.NewMethodInfo(delProductHandler, newProductServiceDelProductArgs, newProductServiceDelProductResult, false),
		"UpdatePrice":        kitex.NewMethodInfo(updatePriceHandler, newProductServiceUpdatePriceArgs, newProductServiceUpdatePriceResult, false),
		"UpdateStock":        kitex.NewMethodInfo(updateStockHandler, newProductServiceUpdateStockArgs, newProductServiceUpdateStockResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `idl\product.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func addProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceAddProductArgs)
	realResult := result.(*product.ProductServiceAddProductResult)
	success, err := handler.(product.ProductService).AddProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceAddProductArgs() interface{} {
	return product.NewProductServiceAddProductArgs()
}

func newProductServiceAddProductResult() interface{} {
	return product.NewProductServiceAddProductResult()
}

func getProductInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductInfoArgs)
	realResult := result.(*product.ProductServiceGetProductInfoResult)
	success, err := handler.(product.ProductService).GetProductInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductInfoArgs() interface{} {
	return product.NewProductServiceGetProductInfoArgs()
}

func newProductServiceGetProductInfoResult() interface{} {
	return product.NewProductServiceGetProductInfoResult()
}

func getProductListInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*product.ProductServiceGetProductListInfoResult)
	success, err := handler.(product.ProductService).GetProductListInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductListInfoArgs() interface{} {
	return product.NewProductServiceGetProductListInfoArgs()
}

func newProductServiceGetProductListInfoResult() interface{} {
	return product.NewProductServiceGetProductListInfoResult()
}

func delProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDelProductArgs)
	realResult := result.(*product.ProductServiceDelProductResult)
	success, err := handler.(product.ProductService).DelProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDelProductArgs() interface{} {
	return product.NewProductServiceDelProductArgs()
}

func newProductServiceDelProductResult() interface{} {
	return product.NewProductServiceDelProductResult()
}

func updatePriceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdatePriceArgs)
	realResult := result.(*product.ProductServiceUpdatePriceResult)
	success, err := handler.(product.ProductService).UpdatePrice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdatePriceArgs() interface{} {
	return product.NewProductServiceUpdatePriceArgs()
}

func newProductServiceUpdatePriceResult() interface{} {
	return product.NewProductServiceUpdatePriceResult()
}

func updateStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateStockArgs)
	realResult := result.(*product.ProductServiceUpdateStockResult)
	success, err := handler.(product.ProductService).UpdateStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateStockArgs() interface{} {
	return product.NewProductServiceUpdateStockArgs()
}

func newProductServiceUpdateStockResult() interface{} {
	return product.NewProductServiceUpdateStockResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddProduct(ctx context.Context, req *product.AddProductRequest) (r *product.AddProductResponse, err error) {
	var _args product.ProductServiceAddProductArgs
	_args.Req = req
	var _result product.ProductServiceAddProductResult
	if err = p.c.Call(ctx, "AddProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductInfo(ctx context.Context, req *product.GetProductInfoRequest) (r *product.GetProductInfoResponse, err error) {
	var _args product.ProductServiceGetProductInfoArgs
	_args.Req = req
	var _result product.ProductServiceGetProductInfoResult
	if err = p.c.Call(ctx, "GetProductInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductListInfo(ctx context.Context) (r *product.GetProductListInfoResponse, err error) {
	var _args product.ProductServiceGetProductListInfoArgs
	var _result product.ProductServiceGetProductListInfoResult
	if err = p.c.Call(ctx, "GetProductListInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelProduct(ctx context.Context, req *product.DelProductRequest) (r *product.DelProductResponse, err error) {
	var _args product.ProductServiceDelProductArgs
	_args.Req = req
	var _result product.ProductServiceDelProductResult
	if err = p.c.Call(ctx, "DelProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePrice(ctx context.Context, req *product.UpdatePriceRequest) (r *product.UpdatePriceResponse, err error) {
	var _args product.ProductServiceUpdatePriceArgs
	_args.Req = req
	var _result product.ProductServiceUpdatePriceResult
	if err = p.c.Call(ctx, "UpdatePrice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateStock(ctx context.Context, req *product.UpdateStockRequest) (r *product.UpdateStockResponse, err error) {
	var _args product.ProductServiceUpdateStockArgs
	_args.Req = req
	var _result product.ProductServiceUpdateStockResult
	if err = p.c.Call(ctx, "UpdateStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
