// Code generated by Kitex v0.7.3. DO NOT EDIT.

package orderlistservice

import (
	orderlist "Eshop/kitex_gen/orderlist"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return orderListServiceServiceInfo
}

var orderListServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "OrderListService"
	handlerType := (*orderlist.OrderListService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddOrder":                    kitex.NewMethodInfo(addOrderHandler, newOrderListServiceAddOrderArgs, newOrderListServiceAddOrderResult, false),
		"DelOrder":                    kitex.NewMethodInfo(delOrderHandler, newOrderListServiceDelOrderArgs, newOrderListServiceDelOrderResult, false),
		"GetOrderListByUserID":        kitex.NewMethodInfo(getOrderListByUserIDHandler, newOrderListServiceGetOrderListByUserIDArgs, newOrderListServiceGetOrderListByUserIDResult, false),
		"GetOrderListByProductNameID": kitex.NewMethodInfo(getOrderListByProductNameIDHandler, newOrderListServiceGetOrderListByProductNameIDArgs, newOrderListServiceGetOrderListByProductNameIDResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "orderlist",
		"ServiceFilePath": `idl\order.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func addOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*orderlist.OrderListServiceAddOrderArgs)
	realResult := result.(*orderlist.OrderListServiceAddOrderResult)
	success, err := handler.(orderlist.OrderListService).AddOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderListServiceAddOrderArgs() interface{} {
	return orderlist.NewOrderListServiceAddOrderArgs()
}

func newOrderListServiceAddOrderResult() interface{} {
	return orderlist.NewOrderListServiceAddOrderResult()
}

func delOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*orderlist.OrderListServiceDelOrderArgs)
	realResult := result.(*orderlist.OrderListServiceDelOrderResult)
	success, err := handler.(orderlist.OrderListService).DelOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderListServiceDelOrderArgs() interface{} {
	return orderlist.NewOrderListServiceDelOrderArgs()
}

func newOrderListServiceDelOrderResult() interface{} {
	return orderlist.NewOrderListServiceDelOrderResult()
}

func getOrderListByUserIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*orderlist.OrderListServiceGetOrderListByUserIDArgs)
	realResult := result.(*orderlist.OrderListServiceGetOrderListByUserIDResult)
	success, err := handler.(orderlist.OrderListService).GetOrderListByUserID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderListServiceGetOrderListByUserIDArgs() interface{} {
	return orderlist.NewOrderListServiceGetOrderListByUserIDArgs()
}

func newOrderListServiceGetOrderListByUserIDResult() interface{} {
	return orderlist.NewOrderListServiceGetOrderListByUserIDResult()
}

func getOrderListByProductNameIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*orderlist.OrderListServiceGetOrderListByProductNameIDArgs)
	realResult := result.(*orderlist.OrderListServiceGetOrderListByProductNameIDResult)
	success, err := handler.(orderlist.OrderListService).GetOrderListByProductNameID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderListServiceGetOrderListByProductNameIDArgs() interface{} {
	return orderlist.NewOrderListServiceGetOrderListByProductNameIDArgs()
}

func newOrderListServiceGetOrderListByProductNameIDResult() interface{} {
	return orderlist.NewOrderListServiceGetOrderListByProductNameIDResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddOrder(ctx context.Context, req *orderlist.AddOrderRequest) (r *orderlist.AddOrderResponse, err error) {
	var _args orderlist.OrderListServiceAddOrderArgs
	_args.Req = req
	var _result orderlist.OrderListServiceAddOrderResult
	if err = p.c.Call(ctx, "AddOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelOrder(ctx context.Context, req *orderlist.DelOrderRequest) (r *orderlist.DelOrderResponse, err error) {
	var _args orderlist.OrderListServiceDelOrderArgs
	_args.Req = req
	var _result orderlist.OrderListServiceDelOrderResult
	if err = p.c.Call(ctx, "DelOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderListByUserID(ctx context.Context, req *orderlist.GetOrderListByUserIDRequest) (r *orderlist.GetOrderListByUserIDResponse, err error) {
	var _args orderlist.OrderListServiceGetOrderListByUserIDArgs
	_args.Req = req
	var _result orderlist.OrderListServiceGetOrderListByUserIDResult
	if err = p.c.Call(ctx, "GetOrderListByUserID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderListByProductNameID(ctx context.Context, req *orderlist.GetOrderListByProductNameRequest) (r *orderlist.GetOrderListByProductNameResponse, err error) {
	var _args orderlist.OrderListServiceGetOrderListByProductNameIDArgs
	_args.Req = req
	var _result orderlist.OrderListServiceGetOrderListByProductNameIDResult
	if err = p.c.Call(ctx, "GetOrderListByProductNameID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
